package com.example.lib.designmode.strategy;


/**
 * 策略模式：定义一系列算法，将每个算法封装到具有公共接口的一系列策略类中，从而使它们可以相互替换 & 让算法可在不影响客户端的情况下发生变化
 *
 * 优点:
 * 策略类之间可以自由切换
 * 由于策略类都实现同一个接口，所以使它们之间可以自由切换。
 * 易于扩展
 * 增加一个新的策略只需要添加一个具体的策略类即可，基本不需要改变原有的代码，符合“开闭原则“
 * 避免使用多重条件选择语句（if else），充分体现面向对象设计思想。
 *
 * 缺点：
 * 客户端必须知道所有的策略类，并自行决定使用哪一个策略类。
 * 策略模式将造成产生很多策略类，可以通过使用享元模式在一定程度上减少对象的数量。
 *
 */
public interface Strategy {


    String getData();

}
